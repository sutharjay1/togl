generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(cuid())
  name          String
  email         String             @unique
  googleId      String?            @unique
  refreshToken  String?
  organizations UserOrganization[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model Organization {
  id        String             @id @default(cuid())
  name      String
  projects  Project[]
  members   UserOrganization[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model UserOrganization {
  id             String @id @default(cuid())
  userId         String
  organizationId String
  role           String @default("MEMBER")

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

model Project {
  id             String  @id @default(cuid())
  name           String
  description    String?
  organizationId String

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  flags     FeatureState[]
  apiKeys   ApiKey[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([organizationId, name])
}

model FeatureState {
  id        String   @id @default(cuid())
  isEnabled Boolean  @default(false)
  rules     Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?
}

model ApiKey {
  id        String @id @default(cuid())
  key       String @unique
  name      String
  projectId String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?

  @@index([expiresAt])
}
